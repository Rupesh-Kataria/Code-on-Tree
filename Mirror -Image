Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
bool symetric(TreeNode *l,TreeNode* r)
{
    if(l==NULL||r==NULL)
       return (l==r);
    if(l->val!=r->val)
       return false;
    return (symetric(l->left,r->right)&& symetric(l->right,r->left));
}
int Solution::isSymmetric(TreeNode* A) {
    return (A==NULL || symetric(A->left,A->right));

}


Method -2
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
bool symetric(TreeNode *p,TreeNode* q)
{
    if(p==NULL||q==NULL)
      return (p==q);
    if(p->val!=q->val)
       return false;
    return (symetric(p->left,q->right) && symetric(p->right,q->left));
}
int Solution::isSymmetric(TreeNode* A) {
    return (A==NULL || symetric(A,A));
}
