Given a binary tree, determine if it is height-balanced.

Height-balanced binary tree  : is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Return 0 / 1 ( 0 for false, 1 for true ) for this problem

Ans
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
int height(TreeNode *root)
{
    if(root==NULL)
       return 0;
    int lh=height(root->left);
    int rh=height(root->right);
    return 1+max(lh,rh);
}
bool check(TreeNode* node)
{
    if(node==NULL)
        return true;
    int lh,rh;
    lh=height(node->left);
    rh=height(node->right);
    if(abs(lh-rh)>1)
        return false;
    bool left =check(node->left);
    if(left==false)
        return false;
    bool right=check(node->right);
    if(right==false)
        return false;
    if(!left||!right)
       return false;
    return true;
}
int Solution::isBalanced(TreeNode* A) {
    return check(A);
}
