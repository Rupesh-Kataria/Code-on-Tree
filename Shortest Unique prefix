Ques Find shortest unique prefix to represent each word in the list.

Example:

Input: [zebra, dog, duck, dove]
Output: {z, dog, du, dov}
where we can see that
zebra = z
dog = dog
duck = du
dove = dov


struct node{
    int fre;
    node *ar[26];
    node(){
        fre=0;
        for(int i=0;i<26;i++)
        {
            ar[i]=NULL;
        }
    }
};
void add(node *root,string s,int idx)
{
    if(idx==s.size())
       return ;
    if(root->ar[s[idx]-'a']==NULL)
        root->ar[s[idx]-'a']=new node();
    root->ar[s[idx]-'a']->fre++;
    add(root->ar[s[idx]-'a'],s,idx+1);
}
int find(node *root,string s,int idx)
{
    if(root->ar[s[idx]-'a']->fre==1)
       return idx;
    if(root->ar[s[idx]-'a']!=NULL)
       return find(root->ar[s[idx]-'a'],s,idx+1);
}
vector<string> Solution::prefix(vector<string> &A) {
    int n=A.size();
    vector<string>v;
    node *root=new node();
    for(int i=0;i<n;i++)
    {
          add(root,A[i],0);
    }
    for(int i=0;i<n;i++)
    {
        int idx=find(root,A[i],0);
        string s="";
        for(auto it:A[i])
        {
            if(idx<0)
              break;
            s+=it;
            idx--;
        }
        v.push_back(s);
    }
    return v;  
}
